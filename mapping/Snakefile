configfile: "config.json"


rule all:
    input:
        fastqc_sample_raw = expand(config["workdir"] + '/{sample}_fastqc_raw', sample=config["samples"]),
        fastqc_sample_cln = expand(config["workdir"] + '/{sample}_fastqc_clean', sample=config["samples"]),
        fastqc_control_raw = expand(config["workdir"] + '/{sample}_fastqc_raw', sample=config["controls"]),
        fastqc_control_cln = expand(config["workdir"] + '/{sample}_fastqc_clean', sample=config["controls"]),
        signal = expand(config["workdir"] + '/{sample}.bigwig', sample=config["samples"])


rule fastqc_raw:
    input:
        fastq = lambda wildcards: config["samples"][wildcards.sample] if wildcards.sample in config["samples"] else config["controls"][wildcards.sample]
    output:
        directory(config["workdir"] + '/{sample}_fastqc_raw')
    threads:
        config["threads"]
    shell:
        """
        mkdir -p {output}
        fastqc -o {output} -t {threads} {input}
        rm -f {output}/*.zip
        """


rule clean_raw_reads:
    input:
        fastq = lambda wildcards: config["samples"][wildcards.sample] if wildcards.sample in config["samples"] else config["controls"][wildcards.sample]
    output:
        read1 = temp(config["workdir"] + '/{sample}_R1.clean.fq'),
        read2 = temp(config["workdir"] + '/{sample}_R2.clean.fq')
    params:
        trimDir = config["trim_dir"],
        adaptor = config["adaptor"],
        minLength = config["minLength"]
    log:
        config["workdir"] + '/Log.trim.{sample}'
    threads:
        config["threads"]
    shell:
        """
        java -jar {params.trimDir}/trimmomatic.jar PE -threads {threads} \
                {input} {output.read1} {output.read1}.single {output.read2} {output.read2}.single \
                ILLUMINACLIP:{params.trimDir}/adapters/{params.adaptor}.fa:2:30:10:1:true LEADING:3 \
                TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:{params.minLength} TOPHRED33 2>{log} 1>&2

        rm -f {output.read1}.single {output.read2}.single
        """


rule fastqc_clean:
    input:
        config["workdir"] + '/{sample}_R1.clean.fq',
        config["workdir"] + '/{sample}_R2.clean.fq'
    output:
        directory(config["workdir"] + '/{sample}_fastqc_clean')
    threads:
        config["threads"]
    shell:
        """
        mkdir -p {output}
        fastqc -o {output} -t {threads} {input}
        rm -f {output}/*.zip
        """


rule mapping:
    input:
        read1 = config["workdir"] + '/{sample}_R1.clean.fq',
        read2 = config["workdir"] + '/{sample}_R2.clean.fq'
    output:
        temp(config["workdir"] + '/{sample}.raw.bam')
    params:
        ref = config["reference_genome"]
    threads:
        config["threads"]
    shell:
        """
        bwa mem -t {threads} -R "@RG\\tID:{wildcards.sample}\\tSM:{wildcards.sample}\\tPL:ILLUMINA" {params.ref} {input.read1} {input.read2} | \
        samtools view -Sb - > {output}
        """


rule sort_bam_by_qname:
    input:
        config["workdir"] + '/{sample}.raw.bam'
    output:
        temp(config["workdir"] + '/{sample}.sort.bam')
    log:
        config["workdir"] + '/Log.sort.{sample}'
    params:
        picard_jar = config["picard"]
    shell:
        "java -Xmx16G -XX:ParallelGCThreads=4 -jar {params.picard_jar} SortSam "
        "    -VALIDATION_STRINGENCY SILENT "
        "    -SORT_ORDER queryname "
        "    -INPUT {input} "
        "    -OUTPUT {output} 2>{log}"


rule mark_dups:
    input:
        config["workdir"] + '/{sample}.sort.bam'
    output:
        bam = temp(config["workdir"] + '/{sample}.markdup.bam'),
        metrics = config["workdir"] + '/markdup.{sample}.metric'
    log:
        config["workdir"] + '/Log.markdup.{sample}'
    params:
        picard_jar = config["picard"]
    shell:
        "java -Xmx16G -XX:ParallelGCThreads=4 -jar {params.picard_jar} MarkDuplicates "
        "    -VALIDATION_STRINGENCY SILENT "
        "    -INPUT {input} "
        "    -OUTPUT {output.bam} "
        "    -METRICS_FILE {output.metrics} 2>{log}"


rule filter_bam:
    input:
        config["workdir"] + ('/{sample}.markdup.bam' if config["rmdup"] else '/{sample}.sort.bam')
    output:
        temp(config["workdir"] + '/{sample}._filtered_.bam')
    params:
        fragLen = '<= 120 && abs($9) >= 10' if config["type"].upper() == "TF" else '>= 250'
    shell:
        "cat <( samtools view -H {input} ) <( samtools view -h -q 30 -F 0xF04 {input} | "
        "grep -v XA:Z | grep -v _random | grep -v chrUn_ | "
        "grep -v _alt | grep -v 'HLA-' | grep -v chrEBV | "
        "samtools fixmate - - | samtools view -f 0x3 - | "
        "awk 'function abs(x){{return ((x < 0) ? -x : x)}} abs($9) {params.fragLen}' ) | "
        "samtools view -Sb - > {output}"


rule sort_filtered_bam:
    input:
        config["workdir"] + '/{sample}._filtered_.bam'
    output:
        config["workdir"] + '/{sample}.filtered.bam'
    threads:
        config["threads"]
    shell:
        """
        samtools sort -@ {threads} -o {output} {input}
        samtools index {output}
        """


rule generate_signal_track:
    input:
        config["workdir"] + '/{sample}.filtered.bam'
    output:
        config["workdir"] + '/{sample}.bigwig'
    threads:
        config["threads"]
    shell:
        "bamCoverage -b {input} -o {output} --binSize 100 --extendReads --normalizeUsing RPKM --exactScaling -p {threads}"



